<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Life]]></title>
  <link href="http://blog.code-life.net/atom.xml" rel="self"/>
  <link href="http://blog.code-life.net/"/>
  <updated>2016-11-26T21:06:42+09:00</updated>
  <id>http://blog.code-life.net/</id>
  <author>
    <name><![CDATA[noto]]></name>
    <email><![CDATA[noto.code.life@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ansibleで複数行の編集を行う]]></title>
    <link href="http://blog.code-life.net/blog/2016/02/09/ansible-blockinfile/"/>
    <updated>2016-02-09T20:00:37+09:00</updated>
    <id>http://blog.code-life.net/blog/2016/02/09/ansible-blockinfile</id>
    <content type="html"><![CDATA[<p>今の会社では構成管理ツールに<a href="http://docs.ansible.com/ansible/index.html">Ansible</a>を採用している。
このところ少し触ってみているが中々良さ気だ。</p>

<!--more-->


<h2>Ansibleの良い所</h2>

<ul>
<li>管理対象サーバにPythonがインストールするだけで動作する(大抵のLinuxディストリビューションにはPythonが最初からインストールされている！)</li>
<li>YAML形式の設定ファイルで読みやすい</li>
<li>Pythonで書かれてる(Python好き)</li>
</ul>


<h2>ファイルの編集</h2>

<p>ホストの構成を管理するにあたって、設定ファイルを頻繁に作成・編集する。Ansibleにはその為の<a href="http://docs.ansible.com/ansible/list_of_files_modules.html">Filesモジュール</a>が用意されている。</p>

<p>Ansible2.0より<a href="http://docs.ansible.com/ansible/blockinfile_module.html">blockinfile</a>モジュールが用意されたことで、以前はできなかった複数行の編集が簡単に行うことができる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- name: Source nvm in ~/.profile
</span><span class='line'>  sudo: yes
</span><span class='line'>  sudo_user: ""
</span><span class='line'>  blockinfile: |
</span><span class='line'>    dest=~/.bash_profile
</span><span class='line'>    content='export NVM_DIR="/home//.nvm"
</span><span class='line'>      [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"'
</span><span class='line'>  tags: nvm</span></code></pre></td></tr></table></div></figure>


<p>すると <code>~/.bash_profile</code> に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># BEGIN ANSIBLE MANAGED BLOCK
</span><span class='line'>export NVM_DIR="/home/ffish/.nvm"
</span><span class='line'>[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
</span><span class='line'># END ANSIBLE MANAGED BLOCK</span></code></pre></td></tr></table></div></figure>


<p>と追記されていることが確認できる。素晴らしいですね。</p>

<h2>参考</h2>

<ul>
<li><a href="http://docs.ansible.com/ansible/blockinfile_module.html">blockinfile</a></li>
<li><a href="http://blog.keshi.org/hogememo/2014/08/24/ansible-blockinfile-module">Ansible blockinfile モジュール</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[リモートブランチをチェックアウトしpushするまでの流れ]]></title>
    <link href="http://blog.code-life.net/blog/2016/02/08/git-push-remote-branch/"/>
    <updated>2016-02-08T19:56:55+09:00</updated>
    <id>http://blog.code-life.net/blog/2016/02/08/git-push-remote-branch</id>
    <content type="html"><![CDATA[<p>Pull Requestをレビューまたはリモートブランチをローカル上で動作させたい場合、ローカルにチェックアウトしたい場合が往々にしてある。</p>

<!--more-->


<p>チェックアウトしローカルブランチを作成するには</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git fetch
</span><span class='line'>$ git checkout feature_branch_name</span></code></pre></td></tr></table></div></figure>


<p>で作成する。尚、この書き方はGit  ≥ 1.6.6 から可能なよう。</p>

<p>修正後pushしたい場合は下記のようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push -u origin feature_branch_name</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/1783405/checkout-remote-git-branch">Checkout remote Git branch</a></li>
<li><a href="http://stackoverflow.com/questions/2765421/push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too">Push a new local branch to a remote Git repository and track it too</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[diff-highlightでgit diff をより見やすくする]]></title>
    <link href="http://blog.code-life.net/blog/2015/11/24/git-diff-highlight/"/>
    <updated>2015-11-24T19:53:43+09:00</updated>
    <id>http://blog.code-life.net/blog/2015/11/24/git-diff-highlight</id>
    <content type="html"><![CDATA[<p><a href="http://motemen.hatenablog.com/entry/2013/11/26/Git_%E3%81%AE_diff_%E3%82%92%E7%BE%8E%E3%81%97%E3%81%8F%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%9F%E3%81%A3%E3%81%9F_1_%E3%81%A4%E3%81%AE%E8%A8%AD">Git の diff を美しく表示するために必要なたった 1 つの設定 #git</a> を見ていい感じだったので設定した。</p>

<!--more-->


<p>brewでインストールしたgitを利用しているので、シンボリックリンクを張る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s "$(brew --prefix git)/share/git-core/contrib/diff-highlight/diff-highlight" /usr/local/bin/</span></code></pre></td></tr></table></div></figure>


<p>パスが通っていることを確認後、~/.gitconfigに以下を追記</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[pager]
</span><span class='line'>    log = diff-highlight | less
</span><span class='line'>    show = diff-highlight | less
</span><span class='line'>    diff = diff-highlight | less</span></code></pre></td></tr></table></div></figure>


<p>差分が単語単位でもハイライト化されて分かりやすい。</p>

<p>[f:id:grmn:20151124000409p:plain]</p>

<p>いい感じ。</p>

<h2>参考</h2>

<ul>
<li><a href="http://motemen.hatenablog.com/entry/2013/11/26/Git_%E3%81%AE_diff_%E3%82%92%E7%BE%8E%E3%81%97%E3%81%8F%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%9F%E3%81%A3%E3%81%9F_1_%E3%81%A4%E3%81%AE%E8%A8%AD">Git の diff を美しく表示するために必要なたった 1 つの設定 #git</a></li>
<li><a href="https://github.com/git/git/tree/master/contrib/diff-highlight">diff-highlight README</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS IPアドレスだけを取得する]]></title>
    <link href="http://blog.code-life.net/blog/2015/09/21/get-ip-on-centos/"/>
    <updated>2015-09-21T19:51:45+09:00</updated>
    <id>http://blog.code-life.net/blog/2015/09/21/get-ip-on-centos</id>
    <content type="html"><![CDATA[<p>IPアドレス自体は<code>ifconfig</code>コマンドや <code>ip -f inet addr</code>で確認することができるがIPアドレスのみ出力するオプションはない模様。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ip -f inet -o addr show eth1 | cut -d\ -f 7 | cut -d/ -f 1</span></code></pre></td></tr></table></div></figure>


<p>IPアドレスだけを抽出する方法は色々あると思うが、まぁこれでいいかと思ってる。デバイス名は適宜変更すること。</p>

<p>CentOS6では確認してるが、それ以外の環境では確認していない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash: scp: command not found]]></title>
    <link href="http://blog.code-life.net/blog/2015/08/28/scp-command-not-found/"/>
    <updated>2015-08-28T19:49:25+09:00</updated>
    <id>http://blog.code-life.net/blog/2015/08/28/scp-command-not-found</id>
    <content type="html"><![CDATA[<p>クライアントからscpコマンドを実行すると<code>bash: scp: command not found</code>と応答された。
その場合、転送先に以下をインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo yum install openssh-clients</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryイベントハンドラを登録したい要素数が多い場合はdelegateでパフォーマンスを向上させる]]></title>
    <link href="http://blog.code-life.net/blog/2015/08/25/jquery-delegate-performance/"/>
    <updated>2015-08-25T19:47:14+09:00</updated>
    <id>http://blog.code-life.net/blog/2015/08/25/jquery-delegate-performance</id>
    <content type="html"><![CDATA[<!--more-->


<h2>イベントハンドラの登録は重い処理</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    ・・・省略・・・
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>100<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">$li</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;bind&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のliすべてにイベントハンドラを登録しようとすると性能がかなり落ちます。
元々イベントハンドラの登録自体が重い処理の為、その重い処理を大量の要素に行うと大きな影響を与えます。</p>

<h2>delegate(委譲)で性能をあげる</h2>

<p>jQueryのonメソッドは、第2引数にイベントを発生させる要素をフィルタリングするセレクタを指定することで、親要素にハンドリングを委譲することができます。
今回の場合、liで発生したイベントを親要素であるulがハンドリングをします。</p>

<p>イベントハンドラの登録数を減らすことで性能の向上が期待できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;delegate&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>jsPerfでの性能テスト結果</h2>

<p><a href="http://jsperf.com">jsPerf</a>でbindとdelegateの性能テスト結果が以下になります。</p>

<p>※テスト環境: Chrome 44.0.2403.157 on Mac OS X 10.9.5</p>

<table>
<thead>
<tr>
<th style="text-align:center;">          </th>
<th> Ops/sec </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> bind     </td>
<td> 5,962   </td>
</tr>
<tr>
<td style="text-align:center;"> delegate </td>
<td> 383,790 </td>
</tr>
</tbody>
</table>


<p>要素数が多い場合、delegeteの方が約64倍性能が高いことが分かります。テストの詳細は<a href="http://jsperf.com/jquey-delegate-peformance">jquey delegate peformance</a>
から確認できます。</p>

<h2>参考</h2>

<ul>
<li><a href="http://gihyo.jp/magazine/wdpress/archive/2012/vol71">WEB+DB PRESS Vol.71</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://blog.code-life.net/blog/2015/08/24/grc-generic-colouriser/"/>
    <updated>2015-08-24T19:44:44+09:00</updated>
    <id>http://blog.code-life.net/blog/2015/08/24/grc-generic-colouriser</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/pengwynn/grc">grc(Generic Colouriser)</a>はログファイルやコマンドの出力結果に色付けして見やすくしてくれるコマンドです。</p>

<!--more-->


<h2>インストール</h2>

<p>homebrewでインストールできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install grc</span></code></pre></td></tr></table></div></figure>


<p>インストール後 <code>~/.bashrc</code> または <code>~/.bash_profile</code>に以下を追記します。追記後<code>source ~/.bashrc</code>で反映させます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source "`brew --prefix`/etc/grc.bashrc"</span></code></pre></td></tr></table></div></figure>


<p>デフォルトで以下のコマンドに色付けがされます。</p>

<ul>
<li>configure</li>
<li>diff</li>
<li>make</li>
<li>gcc</li>
<li>g++</li>
<li>as</li>
<li>gas</li>
<li>ld</li>
<li>netstat</li>
<li>ping</li>
<li>traceroute</li>
<li>head</li>
<li>tail</li>
<li>dig</li>
<li>mount</li>
<li>ps</li>
<li>mtr</li>
<li>df</li>
</ul>


<h2>pingの実行結果</h2>

<p>[f:id:grmn:20150824233235p:plain]</p>

<h2>dfの実行結果</h2>

<p>[f:id:grmn:20150824233238p:plain]</p>

<p>あまり使っている人がいなそうですが、地味に便利です。</p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/pengwynn/grc">grc(Generic Colouriser)</a></li>
<li><a href="https://github.com/Homebrew/homebrew/blob/master/Library/Formula/grc.rb">homebrew/Library/Formula/grc.rb</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant-global-status]]></title>
    <link href="http://blog.code-life.net/blog/2015/08/19/vagrant-global-status/"/>
    <updated>2015-08-19T19:41:46+09:00</updated>
    <id>http://blog.code-life.net/blog/2015/08/19/vagrant-global-status</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Required</h2>

<p>Vagrant 1.6.0+</p>

<h2>仮想マシン一覧の状態を確認</h2>

<p>vagrantの<code>global-status</code>サブコマンドで確認できる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant global-status
</span><span class='line'>
</span><span class='line'>id       name    provider   state    directory
</span><span class='line'>-------------------------------------------------------------------------
</span><span class='line'>76e95f6  default virtualbox poweroff /Users/noto/vagrant/project01
</span><span class='line'>add5d3f  default virtualbox running  /Users/noto/vagrant/project02
</span><span class='line'>a5b5835  default virtualbox aborted  /Users/noto/vagrant/project03
</span><span class='line'>812f37e  default virtualbox poweroff /Users/noto/vagrant/project04
</span><span class='line'>0b9a1f9  default virtualbox running  /Users/noto/vagrant/project05</span></code></pre></td></tr></table></div></figure>


<p>上記で出力されたIDは仮想マシンの操作に使用することができる。(例. <code>vagrant up 76e95f6</code>、 <code>vagrant ssh 76e95f6</code>)</p>

<p>また、IDを指定する場合はどこからでも(Vagrantfileが存在するディレクトリでなくても)操作することができる。</p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/mitchellh/vagrant/blob/master/CHANGELOG.md#160-may-6-2014">Vagrant CHANGELOG</a></li>
<li><a href="http://docs.vagrantup.com/v2/cli/global-status.html">VAGRANT GLOBAL STATUS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CDNを使ってJSをロードする場合、CDNがダウンしたことも考える]]></title>
    <link href="http://blog.code-life.net/blog/2015/08/16/jquery-cdn-fallback/"/>
    <updated>2015-08-16T19:39:33+09:00</updated>
    <id>http://blog.code-life.net/blog/2015/08/16/jquery-cdn-fallback</id>
    <content type="html"><![CDATA[<!--more-->


<h2>CDNを利用するメリット</h2>

<ul>
<li><p>同じCDNから同じファイルをロードしている場合、ブラウザのキャッシュが効き表示速度が向上する可能性がある。※ その為人気のあるCDN (Googleが提供するCDN <a href="https://developers.google.com/speed/libraries/?hl=ja">Google Hosted Libraries</a>等) を利用した方がヒット率があがる。</p></li>
<li><p>アクセスしてきたユーザーに最適なサーバからファイルを配信する為、遅延が起こりにくい。</p></li>
</ul>


<h2>フォールバック</h2>

<p>便利なCDNだが100%ダウンしないことはない。ダウンした場合はローカルのファイルを利用するフォールバック処理をいれておくことでサイトが見れない等の障害を防ぐことができる。</p>

<p>[<a href="https://gist.github.com/850c3711d507bded0153:embed#gist850c3711d507bded0153">https://gist.github.com/850c3711d507bded0153:embed#gist850c3711d507bded0153</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sudo: chkconfig: command not found on CentOS5]]></title>
    <link href="http://blog.code-life.net/blog/2015/08/09/chkconfig-command-not-found-on-centos5/"/>
    <updated>2015-08-09T19:35:57+09:00</updated>
    <id>http://blog.code-life.net/blog/2015/08/09/chkconfig-command-not-found-on-centos5</id>
    <content type="html"><![CDATA[<p>久しぶりにCentOS5系を触ることがあり、いつも通りchkconfigコマンドを実行すると
コマンドがないと怒られた。</p>

<!--more-->


<h2>環境</h2>

<p>CentOS release 5.11 (Final)</p>

<h2>原因</h2>

<p>パスを確認すると/sbinにパスが通っていない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ printenv PATH
</span><span class='line'>/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:/home/vagrant/bin</span></code></pre></td></tr></table></div></figure>


<h2>対処法</h2>

<p>sbinにパスを通す</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vi ~/.bash_profile
</span><span class='line'>PATH=$PATH:/sbin:$HOME/bin</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ source ~/.bash_profile</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phpbrewでxdebugをインストールしようとすると失敗する]]></title>
    <link href="http://blog.code-life.net/blog/2015/08/04/phpbrew-xdebug-install-failed/"/>
    <updated>2015-08-04T19:31:27+09:00</updated>
    <id>http://blog.code-life.net/blog/2015/08/04/phpbrew-xdebug-install-failed</id>
    <content type="html"><![CDATA[<p>phpbrewでxdebugをインストールしようとしたところ以下のエラーが出力された。</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@vagrant-centos65 ~]# phpbrew ext install xdebug                                  [112/3083]
</span><span class='line'>===&gt; Downloading from http://pecl.php.net/get/xdebug-2.3.2.tgz
</span><span class='line'>WARNING: timestamping does nothing in combination with -O. See the manual
</span><span class='line'>for details.
</span><span class='line'>
</span><span class='line'>    --2015-08-02 14:01:18--  http://pecl.php.net/get/xdebug-2.3.2.tgz
</span><span class='line'>    Resolving pecl.php.net... 104.236.228.160
</span><span class='line'>    Connecting to pecl.php.net|104.236.228.160|:80... connected.
</span><span class='line'>    HTTP request sent,  awaiting response... 200 OK
</span><span class='line'>    Length: 266287 (260K) [application/octet-stream]
</span><span class='line'>    Saving to: “/root/.phpbrew/distfiles/xdebug-2.3.2.tgz”
</span><span class='line'>
</span><span class='line'>    100%[=======================================================&gt;] 266, 287      166K/s   in 1.6s
</span><span class='line'>
</span><span class='line'>    2015-08-02 14:01:20 (166 KB/s) - “/root/.phpbrew/distfiles/xdebug-2.3.2.tgz” saved [266287/26628$
</span><span class='line'>    ]
</span><span class='line'>
</span><span class='line'>    ===&gt; /root/.phpbrew/distfiles/xdebug-2.3.2.tgz downloaded.
</span><span class='line'>    ===&gt; Extracting to /root/.phpbrew/build/php-5.3.29/ext...
</span><span class='line'>    ===&gt; Installing xdebug extension...
</span><span class='line'>    Log stored at: /root/.phpbrew/build/php-5.3.29/ext/xdebug/build.log
</span><span class='line'>    Changing directory to /root/.phpbrew/build/php-5.3.29/ext/xdebug
</span><span class='line'>    ===&gt; Phpize...
</span><span class='line'>    ===&gt; Configuring...
</span><span class='line'>    ===&gt; Building...
</span><span class='line'>    ===&gt; Running make all: make -C /root/.phpbrew/build/php-5.3.29/ext/xdebug  all  &gt;&gt; /root/.phpbrew
</span><span class='line'>    /build/php-5.3.29/ext/xdebug/build.log 2&gt;&1
</span><span class='line'>
</span><span class='line'>    Exception: Command failed: make -C /root/.phpbrew/build/php-5.3.29/ext/xdebug  all  &gt;&gt; /root/.php
</span><span class='line'>    brew/build/php-5.3.29/ext/xdebug/build.log 2&gt;&1 returns
</span><span class='line'>    Trace:
</span><span class='line'>
</span><span class='line'>        0) PhpBrew\Utils::system(['make',  '-C',  '/root/.phpbrew/build/php-5.3.29/ext/xdebug',  '',  'al
</span><span class='line'>        l',  ' &gt;&gt; /root/.phpbrew/build/php-5.3.29/ext/xdebug/build.log 2&gt;&1'],  CLIFramework\Logger)
</span><span class='line'>        1) PhpBrew\Tasks\MakeTask-&gt;make('/root/.phpbrew/build/php-5.3.29/ext/xdebug',  'all')
</span><span class='line'>        2) PhpBrew\Tasks\MakeTask-&gt;run(PhpBrew\Extension\PeclExtension)
</span><span class='line'>        3) PhpBrew\Extension\ExtensionInstaller-&gt;install(PhpBrew\Extension\PeclExtension,  [])
</span><span class='line'>        4) PhpBrew\Extension\ExtensionManager-&gt;installExtension(PhpBrew\Extension\PeclExtension,  [])
</span><span class='line'>        5) PhpBrew\Command\ExtensionCommand\InstallCommand-&gt;execute('xdebug')
</span><span class='line'>        6) call_user_func_array([PhpBrew\Command\ExtensionCommand\InstallCommand,  'execute'],  ['xdebu
</span><span class='line'>        g'])
</span><span class='line'>        7) CLIFramework\CommandBase-&gt;executeWrapper(['xdebug'])
</span><span class='line'>        8) CLIFramework\Application-&gt;run(['/usr/bin/phpbrew',  'ext',  'install',  'xdebug'])
</span><span class='line'>        9) CLIFramework\Application-&gt;runWithTry(['/usr/bin/phpbrew',  'ext',  'install',  'xdebug'])
</span><span class='line'>        10) require('phar:///usr/bin/phpbrew/scripts/phpbrew-emb.php')</span></code></pre></td></tr></table></div></figure>


<h2>環境</h2>

<ul>
<li>PHP 5.3.29</li>
</ul>


<h2>原因</h2>

<p>ログを見ても分からなかったのでgoogle先生に聞くと速攻教えてくれる。優しい。</p>

<p><a href="https://github.com/phpbrew/phpbrew/issues/518">Can&rsquo;t install xdebug extension for PHP 5.3.x</a></p>

<p>そういえばPHP5.3系はサポート終了のアナウンスがされていた。 <a href="http://xdebug.org/download.php">DEBUG EXTENSION FOR PHP | DOWNLOADS</a>を確認するとxdebug-2.3.xはPHP5.3に対応していない。</p>

<h2>対処法</h2>

<p>PHP5.3に対応しているxdebug-2.2.7を指定してインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ phpbrew ext install xdebug 2.2.7</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="https://github.com/phpbrew/phpbrew/issues/518">Can&rsquo;t install xdebug extension for PHP 5.3.x</a></li>
<li><a href="http://xdebug.org/download.php">DEBUG EXTENSION FOR PHP | DOWNLOADS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox ホストオンリーネットワークの設定]]></title>
    <link href="http://blog.code-life.net/blog/2014/09/25/configure-the-virtualbox-host-only-network/"/>
    <updated>2014-09-25T01:34:11+09:00</updated>
    <id>http://blog.code-life.net/blog/2014/09/25/configure-the-virtualbox-host-only-network</id>
    <content type="html"><![CDATA[<p>最近はVagrant経由でVirtualBoxを起動させるのでほとんど自分で書くことがないけどね。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>VirtualBox 4.3.16</li>
<li>ホスト Mac OS X 10.9.1</li>
<li>ゲスト CentOS 5.6</li>
</ul>


<h2>ホストオンリーネットワークインターフェースの追加</h2>

<ol>
<li><code>VirtualBox</code> | <code>環境設定</code> | <code>ネットワーク</code> を選択。</li>
<li><code>ホストオンリーネットワーク</code> を選択し<code>ホストオンリーネットワークを追加(+マークのアイコン)</code>をクリック。</li>
<li><code>vboxnet0</code>が作成されたことが確認できる。 アドレス等は適宜変更する。</li>
</ol>


<h2>ホストオンリーアダプターの追加</h2>

<ol>
<li>仮想マシンの設定から <code>ネットワーク</code> | <code>アダプター２</code> を選択する。</li>
<li>割り当てを<code>ホストオンリーアダプター</code>名前を先に作成した<code>vboxnet0</code>とする。</li>
</ol>


<p>ゲストOS起動後、外部ネットワークに接続できることを確認する。</p>

<h2>ネットワークインターフェースの設定</h2>

<p>次のようにネットワーク設定を変更</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vi /etc/sysconfig/network-scripts/ifcfg-eth1
</span><span class='line'>
</span><span class='line'>DEVICE=eth1
</span><span class='line'>BOOTPROTO=static    ← dhcpから変更
</span><span class='line'>ONBOOT=yes
</span><span class='line'>HWADDR="XX:XX:XX:XX:XX:XX"
</span><span class='line'>IPADDR=192.168.56.10  ← 追加 IPアドレスは適宜変更すること
</span><span class='line'>NETMASK=255.255.255.0 ← 追加</span></code></pre></td></tr></table></div></figure>


<p>ネットワークインターフェースの設定完了後、ネットワークの再起動を行いホストOSからsshで接続できることを確認する。</p>

<p>最近DropBoxに溜まってたメモをブログに落としてるが、なんだかんだで時間がかかる。
この時間をプロダクトに当てた方がよいのではないかとふと思うこの頃。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php オブジェクト内のメソッドをcallback関数として渡す場合の注意点]]></title>
    <link href="http://blog.code-life.net/blog/2014/09/23/php-callbacks/"/>
    <updated>2014-09-23T22:28:38+09:00</updated>
    <id>http://blog.code-life.net/blog/2014/09/23/php-callbacks</id>
    <content type="html"><![CDATA[<p>array_filterやarray_mapなどcallback関数を引数にとる関数がphpには多く存在します。</p>

<p>callback関数の渡し方でのハマりどころが1点あったので共有しておきます。</p>

<!--more-->


<p>ほとんどのケースが<a href="http://php.net/manual/ja/language.types.callable.php#example-110">例1 コールバック関数の例</a>に記載されていますが、
オブジェクト内から同じオブジェクト内のメソッドをコールする場合の記載がありません。(タイプ 3: オブジェクトメソッドのコールと同等なので必要ないと言えばないのですが)</p>

<h2>オブジェクト内から同じオブジェクト内のメソッドをコールする</h2>

<figure class='code'><figcaption><span>1.誤</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">CallBack</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$arr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arr</span> <span class="o">=</span> <span class="nv">$arr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">my_callback</span><span class="p">(</span><span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nv">$val</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">print_r</span><span class="p">(</span><span class="nb">array_filter</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arr</span><span class="p">,</span> <span class="s1">&#39;my_callback&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$callback</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CallBack</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">));</span>
</span><span class='line'><span class="nv">$callback</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のコードは一見正しく見えますが実行すると
<code>Warning: array_filter() expects parameter 2 to be a valid callback,  function 'my_callback' not found or invalid function name</code>
とエラーになります。</p>

<p>同じオブジェクト内からコールする場合でもcallbackは配列で指定する必要があります。</p>

<figure class='code'><figcaption><span>2.正</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">CallBack</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$arr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arr</span> <span class="o">=</span> <span class="nv">$arr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">my_callback</span><span class="p">(</span><span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nv">$val</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// オブジェクト自身を指定</span>
</span><span class='line'>        <span class="nb">print_r</span><span class="p">(</span><span class="nb">array_filter</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arr</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;my_callback&#39;</span><span class="p">)));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$callback</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CallBack</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">));</span>
</span><span class='line'><span class="nv">$callback</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意. オブジェクトは常に指定すること</h2>

<p><code>1.誤</code>のコードでもエラーなく動作させることはできます。</p>

<p>以下のコードを実行するとエラーは発生せず、結果として<code>Array ( [0] =&gt; 1 [2] =&gt; 3 [4] =&gt; 5)</code>が出力されます。</p>

<p>名前の一致が生じて予期しない挙動をしておりバグの元となるので、オブジェクトは常に指定するよう注意しましょう。</p>

<figure class='code'><figcaption><span>2.正</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">my_callback</span><span class="p">(</span><span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nv">$val</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CallBack</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$arr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arr</span> <span class="o">=</span> <span class="nv">$arr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">my_callback</span><span class="p">(</span><span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nv">$val</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// array(2, 4, 6)が出力されることを期待</span>
</span><span class='line'>        <span class="nb">print_r</span><span class="p">(</span><span class="nb">array_filter</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arr</span><span class="p">,</span> <span class="s1">&#39;my_callback&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$callback</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CallBack</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">));</span>
</span><span class='line'><span class="nv">$callback</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://php.net/manual/ja/language.types.callable.php">PHP コールバック</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php array_flattenを実装する]]></title>
    <link href="http://blog.code-life.net/blog/2014/09/23/php-array-flatten/"/>
    <updated>2014-09-23T21:24:42+09:00</updated>
    <id>http://blog.code-life.net/blog/2014/09/23/php-array-flatten</id>
    <content type="html"><![CDATA[<p>phpは配列を操作する関数が多くあるが多次元配列をフラットにする関数がない。(ということを最近知った)</p>

<p>実装方法は様々あるが、その中からいくつか紹介します。</p>

<!--more-->


<h2>再帰的に処理をする</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">array_flatten</span><span class="p">(</span><span class="k">array</span> <span class="nv">$arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$ret</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$arr</span> <span class="k">as</span> <span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$item</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$ret</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$ret</span><span class="p">,</span> <span class="nx">array_flatten</span><span class="p">(</span><span class="nv">$item</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$ret</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$item</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>SPLのイテレータクラスを利用する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">array_flatten</span><span class="p">(</span><span class="k">array</span> <span class="nv">$arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">iterator_to_array</span><span class="p">(</span><span class="k">new</span> <span class="nx">RecursiveIteratorIterator</span><span class="p">(</span><span class="k">new</span> <span class="nx">RecursiveArrayIterator</span><span class="p">(</span><span class="nv">$arr</span><span class="p">)),</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>値に対して何らかの処理を行いたい場合はこちらのほうが良いかも。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">array_flatten</span><span class="p">(</span><span class="k">array</span> <span class="nv">$arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$it</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RecursiveIteratorIterator</span><span class="p">(</span><span class="k">new</span> <span class="nx">RecursiveArrayIterator</span><span class="p">(</span><span class="nv">$arr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$ret</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$it</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$ret</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>SPLのイテレータクラス初めて知ったけどシンプルに書けてよいね。</p>

<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/1319903/how-to-flatten-a-multidimensional-array">How to Flatten a Multidimensional Array?</a></li>
<li><a href="http://yuubiseiharukana.blog.shinobi.jp/Entry/1156/">PHP5.4.7 PHPでarray_flatten関数のパフォーマンス測定</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FTP リモート先のファイル名一覧をローカルに保存する方法]]></title>
    <link href="http://blog.code-life.net/blog/2014/09/21/ftp-ls-output-to-local-file-from-the-command-line/"/>
    <updated>2014-09-21T16:32:47+09:00</updated>
    <id>http://blog.code-life.net/blog/2014/09/21/ftp-ls-output-to-local-file-from-the-command-line</id>
    <content type="html"><![CDATA[<p>同僚に聞かれてすぐに応えられなかったので備忘録としてメモ。</p>

<!--more-->


<h2>ファイル一覧を出力する</h2>

<p>単純にファイル一覧を取得するには<code>ls</code>コマンドで出力できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ftp
</span><span class='line'>ftp&gt; open ftp.exsample.com
</span><span class='line'>Name <span class="o">(</span>xxxx<span class="o">)</span>: <span class="o">[</span>ユーザー名応答<span class="o">]</span>
</span><span class='line'>Password: <span class="o">[</span>パスワード応答<span class="o">]</span>
</span><span class='line'><span class="m">230</span> User code-life logged in
</span><span class='line'>Remote system <span class="nb">type </span>is UNIX.
</span><span class='line'>Using binary mode to transfer files.
</span><span class='line'>ftp&gt; ls
</span><span class='line'>drwxr-xr-x <span class="m">428</span> root     wheel        <span class="m">9216</span> Sep <span class="m">16</span> 18:40 ..
</span><span class='line'>-rw-r--r--   <span class="m">1</span> code-life users         <span class="m">773</span> Jan  <span class="m">7</span>  <span class="m">2009</span> .cshrc
</span><span class='line'>-rw-r--r--   <span class="m">1</span> code-life users         <span class="m">258</span> Jan  <span class="m">2</span>  <span class="m">2009</span> .login
</span><span class='line'>-rw-r--r--   <span class="m">1</span> code-life users         <span class="m">167</span> Jan  <span class="m">2</span>  <span class="m">2009</span> .login_conf
</span><span class='line'>-rw-r--r--   <span class="m">1</span> code-life users         <span class="m">762</span> Jan  <span class="m">7</span>  <span class="m">2009</span> .profile
</span><span class='line'>-rw-r--r--   <span class="m">1</span> code-life users         <span class="m">980</span> Jan  <span class="m">2</span>  <span class="m">2009</span> .shrc
</span><span class='line'>drwx------   <span class="m">2</span> code-life users         <span class="m">512</span> Mar <span class="m">13</span>  <span class="m">2009</span> .spamassassin
</span><span class='line'>drwx------   <span class="m">2</span> code-life users         <span class="m">512</span> Mar <span class="m">13</span>  <span class="m">2009</span> .ssh
</span><span class='line'>drwxr-xr-x   <span class="m">5</span> code-life users         <span class="m">512</span> Aug <span class="m">20</span> 22:01 www
</span></code></pre></td></tr></table></div></figure>


<h2>出力したファイル一覧をローカルに保存する</h2>

<p>lsの標準出力をファイルに出力できるかと思ったができない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ftp&gt; dir &gt; test.txt
</span><span class='line'>output to <span class="nb">local</span>-file: test.txt <span class="o">[</span>anpqy?<span class="o">]</span>? y
</span><span class='line'><span class="m">229</span> Entering Extended Passive Mode <span class="o">(||</span><span class="p">|</span>27752<span class="p">|</span><span class="o">)</span>
</span><span class='line'><span class="m">150</span> Opening ASCII mode data connection <span class="k">for</span> file list
</span><span class='line'>     <span class="m">0</span>        0.00 KiB/s
</span><span class='line'>     <span class="m">450</span> &gt;: No such file or directory
</span></code></pre></td></tr></table></div></figure>


<p><code>help ls</code>で確認すると<code>list contents of remote path</code>と期待した応答はしてくれなかった。不親切だ。</p>

<p><code>man ftp</code>で確認する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ls <span class="o">[</span>remote-path <span class="o">[</span><span class="nb">local</span>-file<span class="o">]]</span>
</span><span class='line'>            A synonym <span class="k">for</span> dir.
</span></code></pre></td></tr></table></div></figure>


<p>ということでリモートパスとローカルファイルを指定する。ここではカレントディレクトリのファイル一覧を取得する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ftp&gt; ls . filelist.txt
</span><span class='line'>output to <span class="nb">local</span>-file: filelist.txt <span class="o">[</span>anpqy?<span class="o">]</span>? y
</span><span class='line'><span class="m">229</span> Entering Extended Passive Mode <span class="o">(||</span><span class="p">|</span>14481<span class="p">|</span><span class="o">)</span>
</span><span class='line'><span class="m">150</span> Opening ASCII mode data connection <span class="k">for</span> file list
</span><span class='line'>  <span class="m">1104</span>       38.53 KiB/s
</span><span class='line'>  <span class="m">226</span> Transfer <span class="nb">complete</span>
</span></code></pre></td></tr></table></div></figure>


<p>出力したfilelist.txtはローカルのホームディレクトリ直下にダウンロードされているのが確認できる。</p>

<h2>ファイル一覧を再帰的に出力する</h2>

<p>再帰的にファイル一覧を出力するには<code>R</code>オプションを指定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ftp&gt; ls -R
</span></code></pre></td></tr></table></div></figure>


<h2>再帰的に出力したファイル一覧をローカルに保存する</h2>

<p><code>R</code>オプション指定時にはリモートパスの指定はできない。カレントディレクトリから再帰的に一覧を取得する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ftp&gt; ls -R filelist.txt
</span></code></pre></td></tr></table></div></figure>


<p>結果は上記と同様にローカルのホームディレクトリ直下にダウンロードされている。</p>

<p>こういったちょっとしたことを、さっと応えられるようにしたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacアプリCaffeineのメニューバーアイコンをRetinaディスプレイ用に変更する]]></title>
    <link href="http://blog.code-life.net/blog/2014/09/21/mac-retina-caffeine-icon/"/>
    <updated>2014-09-21T14:33:34+09:00</updated>
    <id>http://blog.code-life.net/blog/2014/09/21/mac-retina-caffeine-icon</id>
    <content type="html"><![CDATA[<p><a href="http://lightheadsw.com/caffeine/">Caffeine</a>は、Macのスリープモードを一時的に無効にするMacの定番アプリです。</p>

<p>起動するとメニューバーにコーヒーカップのアイコンが表示され、クリックすると無効化のON・OFFを切り替えます。</p>

<p>とてもシンプルな機能で重宝していますが一つ不満があります。</p>

<p>アイコンがダサい・・・。</p>

<p><img src="http://blog.code-life.net/images/2014/09/mac-caffeine-1.png"></p>

<!--more-->


<h2>Caffeineのアイコンを変更する</h2>

<p>Retinaディスプレイ対応 &amp; シャレオツなアイコンに変えました。</p>

<h3>アイコンセットをダウンロード</h3>

<p>3つ紹介しますが、探せばもっとあるかもしれません。ちなみに私は「1」を使用しました。</p>

<ol>
<li><a href="https://github.com/bkenny/retina-caffeine">bkenny/retina-caffeine</a></li>
<li><a href="https://webjac.com/design/caffeine-retina-icons/">Caffeine Retina Icons</a></li>
<li><a href="http://blog.timlockridge.com/blog/2013/04/26/retina-menu-bar-icons-for-caffeine/">Retina Menu Bar Icons for Caffeine</a></li>
</ol>


<h3>アイコンの置き換え</h3>

<ol>
<li>/Applications/Caffeine.appを<code>Ctrl + クリック</code>して<code>パッケージの内容を表示</code>を選択</li>
<li>Contents/Resources内に置き換えたいアイコンをコピー</li>
<li>(起動している場合)Caffeineを終了し、Caffeineを起動</li>
</ol>


<h3>結果</h3>

<p>いい感じ。</p>

<p><img src="http://blog.code-life.net/images/2014/09/mac-caffeine-2.png"></p>

<h2>注意</h2>

<p>Caffeine自体のアップデートがあった場合、アイコンがデフォルト状態に戻ります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac メニューバーにカレンダーを表示させるDay-Oが便利]]></title>
    <link href="http://blog.code-life.net/blog/2014/09/07/mac-day-o/"/>
    <updated>2014-09-07T22:11:08+09:00</updated>
    <id>http://blog.code-life.net/blog/2014/09/07/mac-day-o</id>
    <content type="html"><![CDATA[<p>しばらく前から<a href="http://shauninman.com/archive/2011/10/20/day_o_mac_menu_bar_clock">Day-O</a>を利用している。 メニューバーからカレンダーが確認できてなかなか便利。</p>

<!--more-->


<p><img src="http://blog.code-life.net/images/2014/09/mac-day-o-1.png"></p>

<p>日付をクリックすると以下のような表示となる。</p>

<p><img src="http://blog.code-life.net/images/2014/09/mac-day-o-2.png"></p>

<p><code>Preference</code>から日付のフォーマットを変更することもできる。</p>

<p>デフォルトの日付&amp;時刻と別にDay-Oの表示がされていたのでデフォルトはOFFに、またカレンダーを確認するだけに利用してたDashboardも<a href="http://www.bresink.com/osx/TinkerTool.html">TinkerTool</a>で無効にしている。</p>

<p><a href="http://shauninman.com/archive/2011/10/20/day_o_mac_menu_bar_clock">Download Day-O</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH agent forwardingまとめ]]></title>
    <link href="http://blog.code-life.net/blog/2014/09/07/ssh-agent-forwarding/"/>
    <updated>2014-09-07T19:24:56+09:00</updated>
    <id>http://blog.code-life.net/blog/2014/09/07/ssh-agent-forwarding</id>
    <content type="html"><![CDATA[<p>Capistranoを触った際にagent forwardingについて調べたことをまとめておく。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>MacOS X 10.9 (ローカル)</li>
<li>CentOS 6.5 (リモート)</li>
</ul>


<h2>SSH agent forwardingとは</h2>

<p>ローカルからサーバA サーバAからサーバBへSSH接続したい場合、サーバAに秘密鍵を置かずローカルの鍵を参照して認証させる仕組み。</p>

<p>例えば以下のようなことができる。</p>

<ul>
<li>ローカルからサーバAにログイン後、サーバBにログイン</li>
<li>ローカルからサーバAにログイン後、サーバBとファイル同期(rsync)する</li>
<li>ローカルからサーバAにログイン後、git cloneを行う</li>
</ul>


<h2>SSH agent forwardingの設定</h2>

<p>agent forwardingを利用するためにはいくつか条件がある。</p>

<h3>ローカルの条件</h3>

<p>ssh-agentが起動していること。また秘密鍵がssh-agentに登録されていること。</p>

<p>秘密鍵を登録しなければ、参照する鍵がない為SSH接続時にエラーとなる。</p>

<h4>ssh-agentの起動確認</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "$SSH_AUTH_SOCK"
</span><span class='line'>/tmp/launch-5XHwDO/Listeners</span></code></pre></td></tr></table></div></figure>


<h4>秘密鍵を登録</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-add path_to_key</span></code></pre></td></tr></table></div></figure>


<p>再起動後でもssh-agentに鍵を登録させていたい場合は<code>K</code>オプションを利用する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-add -K path_to_key</span></code></pre></td></tr></table></div></figure>


<h4>登録されている秘密鍵を確認</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-add -L</span></code></pre></td></tr></table></div></figure>


<h3>リモートの条件</h3>

<p>AgentForwardingが許可されていること。
<code>sshd_config</code>内の<code>AllowAgentForwarding</code>の値を確認。</p>

<h2>実際にやってみる</h2>

<p>ssh-agentの転送を許可するには<code>A</code>オプションを利用する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -A exsample.com</span></code></pre></td></tr></table></div></figure>


<p>毎回オプション指定するのが面倒な場合は<code>~/.ssh/config</code>に<code>ForwardAgent</code>を追加する。</p>

<figure class='code'><figcaption><span>~/.ssh/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Host exsample.com
</span><span class='line'>  ForwardAgent yes
</span></code></pre></td></tr></table></div></figure>


<p><code>sudo</code> または <code>su</code> 後、転送した鍵情報を利用することができない場合がある。</p>

<p> suの場合、<code>m</code>, <code>p</code>, <code>preserve-environment</code>オプションを利用することで鍵情報を引き継ぐことができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ su -p
</span></code></pre></td></tr></table></div></figure>


<p>sudoの場合、<code>E</code>オプションを利用する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ sudo -E
</span></code></pre></td></tr></table></div></figure>


<p>データを転送したい時やデプロイする時に使えて便利。</p>

<h2>参考</h2>

<ul>
<li><a href="https://developer.github.com/guides/using-ssh-agent-forwarding/">Using SSH agent forwarding</a></li>
<li><a href="http://www.unixuser.org/~euske/doc/openssh/jman/ssh.html">ssh</a></li>
<li><a href="http://linuxjm.sourceforge.jp/html/gnumaniak/man1/su.1.html#index">su</a></li>
<li><a href="http://linuxjm.sourceforge.jp/html/sudo/man8/sudo.8.html">sudo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CakePHP2.x クエリーログを取得する]]></title>
    <link href="http://blog.code-life.net/blog/2014/08/29/how-to-get-query-log-in-cakephp2/"/>
    <updated>2014-08-29T10:58:40+09:00</updated>
    <id>http://blog.code-life.net/blog/2014/08/29/how-to-get-query-log-in-cakephp2</id>
    <content type="html"><![CDATA[<p>どんなクエリが発行されているか確認したい場合があった際のメモ</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>CakePHP 2.5.2</li>
<li>MySQL 5.5.30</li>
</ul>


<h2>注意</h2>

<p>この方法でクエリーログが取得できるのはデバッグレベル2の場合のみ</p>

<h2>クエリーログを取得する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$log</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$Model</span><span class="p">}</span><span class="o">-&gt;</span><span class="na">getDataSource</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getLog</span><span class="p">(</span><span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第１引数は、ソートの有無。trueの場合はtook(ms)で降順ソート</li>
<li>第2引数では、クエリーを格納している変数の初期化を行うか否か</li>
</ul>


<h3>返却値</h3>

<p>以下のデータ構造で返却される。</p>

<figure class='code'><figcaption><span>sample value</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">Array</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">log</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">query</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SELECT</span> <span class="sb">`username`</span> <span class="nx">FROM</span> <span class="sb">`users`</span>  <span class="k">AS</span> <span class="sb">`User`</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">params</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="nx">affected</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">numRows</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">took</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">query</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SELECT</span> <span class="sb">`name`</span> <span class="nx">FROM</span> <span class="sb">`groups`</span>  <span class="k">AS</span> <span class="sb">`Group`</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">params</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="nx">affected</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">numRows</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">took</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">count</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">time</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>getLog</code>が行っている処理内容</p>

<figure class='code'><figcaption><span>lib/Cake/Model/Datasource/DboSource.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Get the query log as an array.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @param boolean $sorted Get the queries sorted by time taken, defaults to false.</span>
</span><span class='line'><span class="sd"> * @param boolean $clear If True the existing log will cleared.</span>
</span><span class='line'><span class="sd"> * @return array Array of queries run as an array</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">getLog</span><span class="p">(</span><span class="nv">$sorted</span> <span class="o">=</span> <span class="k">false</span><span class="p">,</span> <span class="nv">$clear</span> <span class="o">=</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$sorted</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$log</span> <span class="o">=</span> <span class="nx">sortByKey</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_queriesLog</span><span class="p">,</span> <span class="s1">&#39;took&#39;</span><span class="p">,</span> <span class="s1">&#39;desc&#39;</span><span class="p">,</span> <span class="nx">SORT_NUMERIC</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$log</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_queriesLog</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$clear</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_queriesLog</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;log&#39;</span> <span class="o">=&gt;</span> <span class="nv">$log</span><span class="p">,</span> <span class="s1">&#39;count&#39;</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_queriesCnt</span><span class="p">,</span> <span class="s1">&#39;time&#39;</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_queriesTime</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQLWorkbench テーブル毎にストレージエンジンを変更する]]></title>
    <link href="http://blog.code-life.net/blog/2014/08/28/how-to-change-storage-engine-mysql-work-bench/"/>
    <updated>2014-08-28T18:24:52+09:00</updated>
    <id>http://blog.code-life.net/blog/2014/08/28/how-to-change-storage-engine-mysql-work-bench</id>
    <content type="html"><![CDATA[<p>いつからかテーブルのストレージエンジンの項目がどこにあるのか、とても分かりにくくなった。</p>

<!--more-->


<h2>環境</h2>

<ul>
<li>MacOS X 10.9</li>
<li>MySQLWorkbench 6.1</li>
</ul>


<h2>テーブルのストレージエンジンを変更する</h2>

<p>テーブルの詳細を表示し</p>

<p><a href="http://blog.code-life.net/images/2014/08/mysql-work-bench-1.png"><img src="http://blog.code-life.net/images/2014/08/mysql-work-bench-1-500x121.png" width="500" height="121"></a></p>

<p>すると</p>

<p><a href="http://blog.code-life.net/images/2014/08/mysql-work-bench-2.png"><img src="http://blog.code-life.net/images/2014/08/mysql-work-bench-2-500x121.png" width="500" height="121"></a></p>

<p>ストレージエンジンのセレクトボックスが表示される。分りにくい。</p>

<h2>参考</h2>

<p><a href="http://stackoverflow.com/questions/10085203/mysql-workbench-eer-diagramm-how-to-change-storage-engine">MySQL Workbench EER Diagramm - how to change storage engine?</a></p>
]]></content>
  </entry>
  
</feed>
