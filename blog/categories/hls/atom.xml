<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hls | Code Life]]></title>
  <link href="http://blog.code-life.net/blog/categories/hls/atom.xml" rel="self"/>
  <link href="http://blog.code-life.net/"/>
  <updated>2014-09-23T23:30:53+09:00</updated>
  <id>http://blog.code-life.net/</id>
  <author>
    <name><![CDATA[noto]]></name>
    <email><![CDATA[noto.code.life@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FFMpegでHttp Live Streaming(HLS)向けにセグメント化する]]></title>
    <link href="http://blog.code-life.net/blog/2013/12/19/segmenter-from-ffmpeg-for-http-live-streaming/"/>
    <updated>2013-12-19T22:45:00+09:00</updated>
    <id>http://blog.code-life.net/blog/2013/12/19/segmenter-from-ffmpeg-for-http-live-streaming</id>
    <content type="html"><![CDATA[<p><a href="http://blog.code-life.net/blog/2013/04/14/how-to-install-m3u8-segmenter-on-centos/">CentOSにm3u8-segmenterをインストールする</a>がほんのちょっぴり人気なので、FFMpeg単体でもセグメントできるよって話です。</p>

<!--more-->


<h2>FFMpegでSegment化</h2>

<p>コンテンツは既に準備されているものとし、セグメント化のみ行います。</p>

<pre><code class="sh">ffmpeg -i sample.mp4 -acodec copy -vcodec copy \
  -vbsf h264_mp4toannexb \
  -map 0 \
  -f segment \
  -segment_format mpegts \
  -segment_time 5 \
  -segment_list playlist.m3u8 \
  -segment_list_flags -cache \
  stream_%d.ts
</code></pre>

<h3>オプションについて</h3>

<ul>
<li>-acodec copy -vcodec copy

<ul>
<li>コンテンツのコーデックをコピー。トランスコードは行われない。</li>
</ul>
</li>
<li>-segment_time

<ul>
<li>分割秒数の設定。5秒を設定したとしても５秒ジャストでセグメント化されるわけではない。</li>
</ul>
</li>
<li>-segment_list playlist.m3u8

<ul>
<li>プレイリストの出力先</li>
</ul>
</li>
<li>-segment_list_flags -cache

<ul>
<li>キャッシュ(#EXT-X-ALLOW-CACHE)の無効化。デフォルトでは有効。</li>
</ul>
</li>
</ul>


<p>iPhoneやAndroidで再生し挙動を確認をしましたが、FFMpeg内蔵のsegmenterはm3u8-segmenterより優秀ですね。</p>

<p>気が向いたらHLSの暗号化についても書こうかな。</p>

<h2>参考</h2>

<p><a href="http://rest-term.com/archives/3008/">NginxとFFmpegを利用したHTTP Live Streaming配信</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOSにHttpSegmenterをインストールする]]></title>
    <link href="http://blog.code-life.net/blog/2012/05/03/how-to-install-httpsegmenter-on-centos/"/>
    <updated>2012-05-03T00:00:00+09:00</updated>
    <id>http://blog.code-life.net/blog/2012/05/03/how-to-install-httpsegmenter-on-centos</id>
    <content type="html"><![CDATA[<p>notoです。</p>

<p>instagram が facebook に約10億ドルで買収され、動画の instagram と呼ばれている viddy が資金調達ラウンドでかなりの資金を集めてるみたいですね。
世は動画時代 真っ盛りです。</p>

<p>そういうわけで（？）、HttpSegmenter のインストール方法の備忘録です。</p>

<!--more-->


<h2>インストール環境</h2>

<ul>
<li>CentOS5.8</li>
</ul>


<h2>必要条件</h2>

<ul>
<li>最新のFFmpegがインストールされていること</li>
<li>cmake 2.6+</li>
</ul>


<h2>cmakeのインストール</h2>

<p>※ダウンロードするファイルは ver2.6以上を利用すること。</p>

<pre><code>cd /usr/local/src
wget http://www.cmake.org/files/v2.8/cmake-2.8.8.tar.gz
tar xzf cmake-2.8.8.tar.gz
cd cmake-2.8.8/
./bootstrap
make
make install
</code></pre>

<h2>環境変数の設定</h2>

<p>~/.bash_profile または ~/.bashrc に以下を追記</p>

<pre><code>PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
export PKG_CONFIG_PATH
</code></pre>

<h3>確認</h3>

<pre><code>printenv PKG_CONFIG_PATH
</code></pre>

<p>以下のパスが出力されていることを確認する。</p>

<pre><code>/usr/local/lib/pkgconfig
</code></pre>

<h2>httpsegmenterのインストール</h2>

<pre><code>cd /usr/local/src
git clone https://github.com/midnox/httpsegmenter
cd httpsegmenter/
cmake .
make
make install
</code></pre>

<h3>httpsegmenterの確認</h3>

<pre><code>segmenter -h
</code></pre>

<pre><code>Segmenter for HTTP Live Streaming v0.1
part of HTTP-Live-Video-Stream-Segmenter-and-Distributor @ github

Usage: segmenter -i infile [-d baseDir] [-f baseFileName] [-o playListFile.m3u8] [-l 10] [-a|-v] [-t]

Options (you can use -- or - for short option prefix e.g. -i == --i):
-i Input file. Required.
-o Playlist file to create. Default is .m3u8
-d The base directory for files. Default is '.'
-f Segment files will be named -#. Default is
-l The length of each segment. Default is 5
-p The name of the encoding profile
-u The URL prefix
-t Enable id3 tagging code (EXPERIMENTAL)
-a audio only decode for &amp;lt; 64k streams.
-v video only decode for &amp;lt; 64k streams.

--version Print version details and exit.
-h,--help Print this info.
</code></pre>

<h2>httpsegmenterの利用方法</h2>

<pre><code>segmenter -i ~/test2.ts -d '.' -f stream2 -o stream2.m3u8 -l 10
</code></pre>

<p>セグメント化されたtsファイルとm3u8ファイルが出力されていることが確認できます。</p>

<h2>備考</h2>

<p>httpsegmenter には、セグメント化されたファイルを FTP, SCP経由 または AWS S3に転送するスクリプト(Ruby)が存在します。
<a href="https://github.com/midnox/httpsegmenter" title="httpsegmenter" target="_blank">httpsegmenter</a>のgitのREQUIREMENTS項目に必要環境が記載されているので、利用されたい方は試してみてはいかがでしょう。</p>

<p>ちなみにボクはまだ試してません。。。</p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/midnox/httpsegmenter" title="httpsegmenter" target="_blank">httpsegmenter</a></li>
<li><a href="http://www.ioncannon.net/projects/http-live-video-stream-segmenter-and-distributor/" title="http live video segmenter" target="_blank">http live video segmenter</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
