<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Code Life]]></title>
  <link href="http://blog.code-life.net/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.code-life.net/"/>
  <updated>2014-08-28T22:20:14+09:00</updated>
  <id>http://blog.code-life.net/</id>
  <author>
    <name><![CDATA[noto]]></name>
    <email><![CDATA[noto.code.life@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rsync sshポートを指定する]]></title>
    <link href="http://blog.code-life.net/blog/2014/08/28/change-ssh-port-when-using-rsync/"/>
    <updated>2014-08-28T16:52:28+09:00</updated>
    <id>http://blog.code-life.net/blog/2014/08/28/change-ssh-port-when-using-rsync</id>
    <content type="html"><![CDATA[<p>rsyncは一般的にはデフォルトでsshを利用するよう設定されているがeオプションで変更することができる。</p>

<!--more-->


<pre><code>$ rsync -av -e 'ssh -p 10022' ~/path_to_local/files/ user@hostname:~/path_to_remote/files/
</code></pre>

<p>eオプションでなく環境変数 <code>RSYNC_RSH</code> に設定しても同じことができる。</p>

<blockquote><p>You can also choose the remote shell program using the RSYNC_RSH environment variable,  which accepts the same range of values as -e.</p>

<p>引用元: <cite><a href="http://rsync.samba.org/ftp/rsync/rsync.html">rsync</a><cite></p></blockquote>

<pre><code>$ export RSYNC_RSH="ssh -p 10022"
$ rsync -av ~/path_to_local/files/ user@hostname:~/path_to_remote/files/
</code></pre>

<h2>参考</h2>

<p><a href="http://rsync.samba.org/ftp/rsync/rsync.html">rsync</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 新規ユーザーのホームディレクトリの雛形設定]]></title>
    <link href="http://blog.code-life.net/blog/2014/08/27/linux-skelton-directory/"/>
    <updated>2014-08-27T17:54:17+09:00</updated>
    <id>http://blog.code-life.net/blog/2014/08/27/linux-skelton-directory</id>
    <content type="html"><![CDATA[<p>useraddコマンドで新規ユーザーを作成するとホームディレクトリ内に下記のようないくつかの設定ファイルが既に存在している。</p>

<!--more-->


<pre><code>.
├── .bash_logout
├── .bash_profile
└── .bashrc
</code></pre>

<p>これらのファイルは、<code>/etc/skel</code>内のファイルがコピーされたもので、<code>/etc/skel</code>内にファイルを追加、変更を行うと
新規ユーザーのホームディレクトリの雛形を作成することができる。</p>

<h2>雛形ディレクトリを変更する</h2>

<p>デフォルトでは<code>/etc/skel</code>だが、useraddの設定ファイル<code>/etc/default/useradd</code>に指定することで変更することができる。</p>

<pre><code>$ sudo vi /etc/default/useradd

# useradd defaults file
GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel ← ここを変える
CREATE_MAIL_SPOOL=yes
</code></pre>

<h2>参考</h2>

<p><a href="http://linuxg.net/the-unix-and-linux-skeleton-directory-etcskel/">The Unix and Linux skeleton directory: /etc/skel</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.x SCPコマンドが見つからない場合]]></title>
    <link href="http://blog.code-life.net/blog/2013/04/14/scp-command-not-found-on-centos/"/>
    <updated>2013-04-14T22:32:00+09:00</updated>
    <id>http://blog.code-life.net/blog/2013/04/14/scp-command-not-found-on-centos</id>
    <content type="html"><![CDATA[<p>CentOS6.xをminimalで構成した場合、クライアントからscpコマンドを実行すると
&ldquo;bash: scp: コマンドが見つかりません&#8221;と怒られる。</p>

<!--more-->


<p>以下のパッケージをインストールをすれば利用できるようになります。</p>

<pre><code class="sh">$ yum install openssh-clients
</code></pre>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DarwinStreamingServerをインストールする]]></title>
    <link href="http://blog.code-life.net/blog/2011/12/08/install-darwin-streaming-server/"/>
    <updated>2011-12-08T00:00:00+09:00</updated>
    <id>http://blog.code-life.net/blog/2011/12/08/install-darwin-streaming-server</id>
    <content type="html"><![CDATA[<p>chakemiです。
本日は、RTSPストリーミングで試したいことがあったので、久しぶりにDarwinStreamingServerをインストールしたので、その手順を書きたいと思います。</p>

<!--more-->


<h2>実行環境</h2>

<ul>
<li>CentOS5.5</li>
</ul>


<p>まず、DarwinStreamingServer(以後DSS)をLINUXでコンパイルするため必要なgcc-c++をインストールします。</p>

<pre><code>[root@localhost ~]# yum install gcc-c++
</code></pre>

<p>次にDSS実行に必要なユーザーとグループを作成しておきます。</p>

<pre><code>[root@localhost ~]# groupadd qtss
[root@localhost ~]# useradd qtss -g qtss
</code></pre>

<p>DSSのソースをダウンロードして展開します。</p>

<pre><code>[root@localhost ~]# wget http://dss.macosforge.org/downloads/DarwinStreamingSrvr6.0.3-Source.tar
[root@localhost ~]# tar xvf DarwinStreamingSrvr6.0.3-Source.tar
</code></pre>

<p>有志によって作成されているLINUX用のpatchをダウンロードし設定します。</p>

<pre><code>[root@localhost ~]# wget http://www.abrahamsson.com/dss-6.0.3.patch
[root@localhost ~]# patch -p0 &lt; dss-6.0.3.patch
</code></pre>

<h2>インストール</h2>

<pre><code>[root@localhost ~]# cd DarwinStreamingSrvr6.0.3-Source
[root@localhost DarwinStreamingSrvr6.0.3-Source]# ./buildtarball
[root@localhost DarwinStreamingSrvr6.0.3-Source]# cd DarwinStreamingSrvr-Linux
[root@localhost DarwinStreamingSrvr-Linux]# ./Install
</code></pre>

<p>adminユーザーとパスワードの設定を求められます。</p>

<pre><code>In order to administer the Darwin Streaming Server you must create an administrator user [Note: The administrator user name cannot contain spaces, or single or double quote characters, and cannot be more than 255 characters long].
Please enter a new administrator user name:

You must also enter a password for the administrator user [Note: The administrator password cannot contain spaces, or quotes, either single or double, and cannot be more than 80 characters long].
Please enter a new administrator Password:

Re-enter the new administrator password:
</code></pre>

<p>無事にインストールが完了したら下記3つのプロセスが起動しているか確認します。</p>

<pre><code>[root@localhost DarwinStreamingSrvr-Linux]# ps -aux
root     20297  0.0  0.1   4452   456 ?        Ss   04:16   0:00 /usr/local/sbin/DarwinStreamingServer
qtss     20298  0.1  0.8  45860  2124 ?        Sl   04:16   0:00 /usr/local/sbin/DarwinStreamingServer
qtss     20299  0.0  1.7  13520  4360 ?        Ss   04:16   0:00 /usr/bin/perl /usr/local/sbin/streamingadminserver.pl
</code></pre>

<p>webインターフェース http://localhost:1220/ にアクセスして先ほど作成したadminユーザーでログインします。</p>


<p><a href="/images/2011/12/darwin-streaming-server.jpg"><img src="/images/2011/12/darwin-streaming-server-300x205.jpg" width="300" height="205"></a></p>

<p>ダイアログに沿って設定を行えば完了です。</p>

<p><a href="/images/2011/12/darwin-streaming-server.jpg"><img src="/images/2011/12/darwin-streaming-server2-300x197.jpg" width="300" height="197"></a></p>

<p>QuickTimePlayerなどで、rtsp://localhost:554/sample_100kbit.mp4とかでアクセスして再生出来ればOKです。</p>

<p>この後、tcpdumpでゴニョゴニョしてたら、クラッシュさせてしまってどう頑張ってもネットワークアダプタが認識出来なくなってしまいました・・・orz</p>

<p>仮想OSだったので、これ以上追うより再構築したほうが早いと判断して、本日の検証終了（泣）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINUX上でC#アプリを実行してみた]]></title>
    <link href="http://blog.code-life.net/blog/2011/09/22/c-sharp-linux/"/>
    <updated>2011-09-22T00:00:00+09:00</updated>
    <id>http://blog.code-life.net/blog/2011/09/22/c-sharp-linux</id>
    <content type="html"><![CDATA[<p>chakemiです。会社からお家まで5分程度なんで、台風だってへっちゃらです。</p>

<p>本日は、C#で作成したアプリを、monoを使ってLinux上で実行してみました。
GUIアプリも試したかったので、デスクトップ環境にて検証しました。</p>

<!--more-->


<h2>開発環境</h2>

<ul>
<li>CentOS5.5 （Desktop-Gnome）</li>
<li>VisualStudio2008（WindowsXP SP3）</li>
</ul>


<p>まず、monoのインストールですが、gcc、gcc++、bisonが必要なようで
yumパッケージからインストールします。</p>

<p>Gnome端末から</p>

<pre><code>[root@localhost ~]yum install gcc
[root@localhost ~]yum install gcc-c++
[root@localhost ~]yum install bison
</code></pre>

<p>monoソースをダウンロードして</p>

<pre><code>[root@localhost ~]# wget http://ftp.novell.com/pub/mono/sources/mono/mono-2.10.2.tar.bz2
[root@localhost ~]# bzip2 -dc mono-2.10.2.tar.bz2 | tar xvf -
[root@localhost ~]# cd mono-2.10.2
[root@localhost mono-2.10.2]# ./configure
[root@localhost mono-2.10.2]# make
↑めっちゃ時間かかりました。まぁ.netframeworkを移植してるわけですからねぇ～。。。
[root@localhost mono-2.10.2]# make check
[root@localhost mono-2.10.2]# make install
</code></pre>

<p>んで、無事インストール完了</p>

<pre><code>[root@localhost mono-2.10.2]# mono --version
Mono JIT compiler version 2.10.2 (tarball 2011年  9月 21日 水曜日 23:59:08 JST)
Copyright (C) 2002-2011 Novell, Inc and Contributors. www.mono-project.com
        TLS:           __thread
        SIGSEGV:       altstack
        Notifications: epoll
        Architecture:  x86
        Disabled:      none
        Misc:          softdebug
        LLVM:          supported, not enabled.
        GC:            Included Boehm (with typed GC and Parallel Mark)
</code></pre>

<p>適当なコンソールアプリを作成してLinuxへ移し、実行してみました。</p>

<pre><code>[root@localhost mono-2.10.2]#mono helloworld.exe
Hello, world
</code></pre>

<p>おお～、動きました～！！
しかし残念ながらFormを使ったアプリはmono-winformsがちゃんと動かず、実行できませんでした。</p>

<p>時間が出来たらちゃんと原因追求したいと思います。</p>
]]></content>
  </entry>
  
</feed>
