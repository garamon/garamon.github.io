<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node.js | Code Life]]></title>
  <link href="http://blog.code-life.net/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://blog.code-life.net/"/>
<<<<<<< HEAD
  <updated>2016-11-26T21:13:31+09:00</updated>
=======
  <updated>2015-08-08T00:04:40+09:00</updated>
>>>>>>> origin/master
  <id>http://blog.code-life.net/</id>
  <author>
    <name><![CDATA[noto]]></name>
    <email><![CDATA[noto.code.life@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOSにnode.jsをインストールする]]></title>
    <link href="http://blog.code-life.net/blog/2013/04/29/install-node-on-centos/"/>
    <updated>2013-04-29T00:13:00+09:00</updated>
    <id>http://blog.code-life.net/blog/2013/04/29/install-node-on-centos</id>
    <content type="html"><![CDATA[<p>JavaScript力向上の為、node.jsで何か作ってみようと思いインストールしてみた。</p>

<!--more-->




<!--more-->


<h2>環境</h2>

<p>CentOS 6.3</p>

<h2>依存パッケージのインストール</h2>

<pre><code class="sh">$ yum install git openssh-devel
</code></pre>

<h2>nvm(node.jsバージョン管理)のインストール</h2>

<p>node.jsのバージョン管理は<a href="https://github.com/creationix/nvm">nvm</a>の他に<a href="https://github.com/hokaccha/nodebrew">nodebrew</a>や<a href="https://github.com/ekalinin/nodeenv">nodeenv</a>があるらしいが、初めてなので安直にStarが多かったnvmを利用してみる。</p>

<pre><code class="sh">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh
</code></pre>

<p>~/.bash_profileを確認すると次の設定が追加されていた。</p>

<pre><code>[[ -s /root/.nvm/nvm.sh ]] &amp;&amp; . /root/.nvm/nvm.sh # This loads NVM
</code></pre>

<h3>反映</h3>

<p>ということで反映</p>

<pre><code>$ source ~/.bash_profile
</code></pre>

<h2>サブコマンドの補完</h2>

<p>nvmコマンドは使えるようになったが、サブコマンドの補完が効かないので以下の設定を ~/.bash_profile または ~/.bashrc に追加</p>

<pre><code>[[ -r $NVM_DIR/bash_completion ]] &amp;&amp; . $NVM_DIR/bash_completion
</code></pre>

<p>設定を反映させたら nvm [tab][tab] でサブコマンドの補完が効くようになる。</p>

<pre><code>$ nvm
alias          copy-packages  help           list           ls             run            uninstall      version
clear-cache    deactivate     install        list-remote    ls-remote      unalias        use
</code></pre>

<h2>node.jsのインストール</h2>

<p>サブコマンド「ls-remote」で利用可能なnode.jsのバージョンが確認できるので表示させてみる。</p>

<h3>利用可能なバージョンの確認</h3>

<pre><code class="sh">$ nvm ls-remote
   v0.1.14     v0.1.29    v0.1.100      v0.3.3      v0.4.9      v0.6.0     v0.6.15      v0.7.8     v0.8.10      v0.9.1     v0.10.3
   v0.1.15     v0.1.30    v0.1.101      v0.3.4     v0.4.10      v0.6.1     v0.6.16      v0.7.9     v0.8.11      v0.9.2     v0.10.4
   v0.1.16     v0.1.31    v0.1.102      v0.3.5     v0.4.11      v0.6.2     v0.6.17     v0.7.10     v0.8.12      v0.9.3     v0.10.5
   v0.1.17     v0.1.32    v0.1.103      v0.3.6     v0.4.12      v0.6.3     v0.6.18     v0.7.11     v0.8.13      v0.9.4     v0.11.0
   v0.1.18     v0.1.33    v0.1.104      v0.3.7      v0.5.0      v0.6.4     v0.6.19     v0.7.12     v0.8.14      v0.9.5     v0.11.1
   v0.1.19     v0.1.90      v0.2.0      v0.3.8      v0.5.1      v0.6.5     v0.6.20      v0.8.0     v0.8.15      v0.9.6
   v0.1.20     v0.1.91      v0.2.1      v0.4.0      v0.5.2      v0.6.6     v0.6.21      v0.8.1     v0.8.16      v0.9.7
   v0.1.21     v0.1.92      v0.2.2      v0.4.1      v0.5.3      v0.6.7      v0.7.0      v0.8.2     v0.8.17      v0.9.8
   v0.1.22     v0.1.93      v0.2.3      v0.4.2      v0.5.4      v0.6.8      v0.7.1      v0.8.3     v0.8.18      v0.9.9
   v0.1.23     v0.1.94      v0.2.4      v0.4.3      v0.5.5      v0.6.9      v0.7.2      v0.8.4     v0.8.19     v0.9.10
   v0.1.24     v0.1.95      v0.2.5      v0.4.4      v0.5.6     v0.6.10      v0.7.3      v0.8.5     v0.8.20     v0.9.11
   v0.1.25     v0.1.96      v0.2.6      v0.4.5      v0.5.7     v0.6.11      v0.7.4      v0.8.6     v0.8.21     v0.9.12
   v0.1.26     v0.1.97      v0.3.0      v0.4.6      v0.5.8     v0.6.12      v0.7.5      v0.8.7     v0.8.22     v0.10.0
   v0.1.27     v0.1.98      v0.3.1      v0.4.7      v0.5.9     v0.6.13      v0.7.6      v0.8.8     v0.8.23     v0.10.1
   v0.1.28     v0.1.99      v0.3.2      v0.4.8     v0.5.10     v0.6.14      v0.7.7      v0.8.9      v0.9.0     v0.10.2
</code></pre>

<p><a href="http://blog.nodejs.org/">release notes</a>を確認すると現時点ではv0.10.5がstableなのでこいつをインストールする。</p>

<h3>v0.10.5のインストール</h3>

<pre><code>nvm install 0.10.5
</code></pre>

<h3>Aliasの設定</h3>

<p>新しくshellを立ち上げたり再起動をかけるとnvmの設定がリセットされるようなのでデフォルトのバージョンを設定する。</p>

<pre><code>$ nvm alias default 0.10.5
</code></pre>

<p>とりあえずこんな感じで大丈夫なのかな。</p>

<h2>参考</h2>

<p><a href="https://github.com/creationix/nvm">Node Version Manager</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.jsにexpressをインストールしてみた]]></title>
    <link href="http://blog.code-life.net/blog/2011/10/11/install-node-js-express/"/>
    <updated>2011-10-11T00:00:00+09:00</updated>
    <id>http://blog.code-life.net/blog/2011/10/11/install-node-js-express</id>
    <content type="html"><![CDATA[<p>chakemiです。三連休で完全に生活リズムが崩れてしまいました。</p>

<p>本日はnode.jsでwebアプリを作成する際に、便利なフレームワークexpressを
インストールしてみます。</p>

<!--more-->


<p>node.jsやパッケージマネージャーのインストールは<a href="/blog/2011/09/10/start-a-websocket">こちら</a>を参考に。</p>

<h2>構築環境</h2>

<ul>
<li>CentOS5.5</li>
<li>node.js v0.4.11</li>
<li>npm 1.0.27
※node自体のバージョン管理ツールも入れておけばよかったと今頃気づきました。。。</li>
</ul>


<p>ではさっそくnpmでexpressをインストールしてみます。
-gオプションは前にも書きましたが、コマンドを提供しているパッケージをインストールする際
付与することでグローバルインストールとなりシンボリックリンクを張ったような形で使用出来ます。
って、こんな説明でいいのかな？</p>

<pre><code>[root@localhost ~]# npm install -g express
/usr/local/bin/express -&amp;gt; /usr/local/lib/node_modules/express/bin/express
express@2.4.7 /usr/local/lib/node_modules/express
├── mime@1.2.4
├── qs@0.3.1
├── connect@1.7.1
└── mkdirp@0.0.7
</code></pre>

<p>インストールが無事完了したので、expressでtest01というアプリを作成してみます。</p>

<pre><code>[root@localhost ~]# express test01
   create : test01
   create : test01/package.json
   create : test01/app.js
   create : test01/views
   create : test01/views/layout.jade
   create : test01/views/index.jade
   create : test01/public/javascripts
   create : test01/public/images
   create : test01/public/stylesheets
   create : test01/public/stylesheets/style.css
</code></pre>

<p>作成したtest01ディレクトリの配下にwebアプリのひな形が作成されますので、
必要なモジュールをインストールします。</p>

<p>必要なモジュールの情報は[package.json]に纏められているので
下記のようにしてインストール。</p>

<pre><code>[root@localhost ~]# cd test01/
[root@localhost test01]# npm install
</code></pre>

<p>※インストールの際、詳細を見たい場合、-dオプションをつけると
下記のようにnpmの細かい情報が見れます。</p>

<pre><code>[root@localhost test01]# npm install -d
npm info it worked if it ends with ok
npm info using npm@1.0.27
npm info using node@v0.4.11
npm info preinstall application-name@0.0.1
npm info addNamed [ 'jade', '&amp;gt;= 0.0.1' ]
npm info addNamed [ 'express', '2.4.7' ]
npm info fetch https://registry.npmjs.org/jade/-/jade-0.16.2.tgz
npm info shasum 514de77b161b9101a9a65eb4f1553fcf395c618a
npm info shasum /tmp/npm-1315676593472/1315676593472-0.3313761476892978/tmp.tgz
npm info shasum 0db4d4c19de0997390d9716e7def76eb5d248d09
npm info shasum /root/.npm/jade/0.16.2/package.tgz
npm info into /root/test01 express@2.4.7
npm info into /root/test01 jade@0.16.2
npm info installOne express@2.4.7
npm info installOne jade@0.16.2
npm info unbuild /root/test01/node_modules/express
npm info unbuild /root/test01/node_modules/jade
npm info preinstall express@2.4.7
npm info addNamed [ 'connect', '1.7.x' ]
npm info addNamed [ 'mime', '&amp;gt;= 0.0.1' ]
npm info addNamed [ 'qs', '&amp;gt;= 0.3.1' ]
npm info addNamed [ 'mkdirp', '0.0.7' ]
npm info preinstall jade@0.16.2
npm info addNamed [ 'commander', '0.1.0' ]
npm info addNamed [ 'mkdirp', '&amp;gt;= 0.0.7' ]
npm info fetch https://registry.npmjs.org/commander/-/commander-0.1.0.tgz
npm info into /root/test01/node_modules/express mkdirp@0.0.7
npm info into /root/test01/node_modules/express connect@1.7.1
npm info into /root/test01/node_modules/express mime@1.2.4
npm info into /root/test01/node_modules/express qs@0.3.1
npm info installOne mkdirp@0.0.7


～～～省略～～～


npm info build /root/test01/node_modules/jade/node_modules/mkdirp
npm info linkStuff mkdirp@0.0.7
npm info install mkdirp@0.0.7
npm info postinstall mkdirp@0.0.7
npm info build /root/test01/node_modules/jade
npm info linkStuff jade@0.16.2
npm info install jade@0.16.2
npm info postinstall jade@0.16.2
npm info build /root/test01
npm info linkStuff application-name@0.0.1
npm info install application-name@0.0.1
npm info postinstall application-name@0.0.1
express@2.4.7 ./node_modules/express
├── mkdirp@0.0.7
├── mime@1.2.4
├── qs@0.3.1
└── connect@1.7.1
jade@0.16.2 ./node_modules/jade
├── commander@0.1.0
└── mkdirp@0.0.7
npm info ok
</code></pre>

<p>モジュールも無事インストール出来たようで
test01ディレクトリにnode_modulesディレクトリが作成されました。</p>

<pre><code>drwxr-xr-x  5 root root 4096  10月 11 22:43 .
drwxr-xr-x 10 root root 4096  10月 11 22:42 ..
-rw-r--r--  1 root root  812  10月 11 22:42 app.js
drwxr-xr-x  5 root root 4096  10月 11 22:43 node_modules
-rw-r--r--  1 root root  153  10月 11 22:42 package.json
drwxr-xr-x  5 root root 4096  10月 11 22:42 public
drwxr-xr-x  2 root root 4096  10月 11 22:42 views
</code></pre>

<p>後は、app.jsを実行し動作を確認してみます。</p>

<pre><code>[root@localhost test01]# node app.js
Express server listening on port 3000 in development mode
</code></pre>

<p>コンソールに待受ポートを示したメッセージが表示されたら
ブラウザで、http://localhost:3000にアクセスします。</p>


<<<<<<< HEAD
<p>{% img /images/2011/10/express.jpg 242 214 %}</p>
=======
<p><img src="/images/2011/10/express.jpg" width="242" height="214"></p>
>>>>>>> origin/master

<p>上のように表示され無事、作成出来ました。</p>

<p>expressはRubyで使われるフレームワーク「Sinatra」に近いようです。
まぁRubyは触った事が無いんで、Sinatraもわかりません。。。</p>

<p>近いうちにwebsocketを使ったchatではない、何かアプリを作りたいなぁなんて思ってます。</p>
]]></content>
  </entry>
  
</feed>
