<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Code Life]]></title>
  <link href="http://blog.code-life.net/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://blog.code-life.net/"/>
  <updated>2014-08-19T01:17:07+09:00</updated>
  <id>http://blog.code-life.net/</id>
  <author>
    <name><![CDATA[noto]]></name>
    <email><![CDATA[noto.code.life@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP5 引数の型を指定する]]></title>
    <link href="http://blog.code-life.net/blog/2012/01/12/type-hinting-php/"/>
    <updated>2012-01-12T00:00:00+09:00</updated>
    <id>http://blog.code-life.net/blog/2012/01/12/type-hinting-php</id>
    <content type="html"><![CDATA[<p>notoです。</p>

<p>オープンソースを眺めていると、引数で型を指定しているのを見かけたことありませんか？
マニュアルをみると<a href="http://php.net/manual/ja/language.oop5.typehinting.php">タイプヒンティング</a>と呼ばれているようです。</p>

<p>タイプヒンティングを軽く検証してみました。</p>

<!--more-->


<p>```php
&lt;?php
class Hoge {</p>

<pre><code>private $animal;

/**
 * 渡せる型をLion型のみと制限する。
 * @param Lion $lion
 */
public function setAnimal(Lion $lion){
    $this-&gt;animal = $lion;
}

public function howl(){
    echo $this-&gt;animal-&gt;howl(), PHP_EOL;
}
</code></pre>

<p>}</p>

<p>class Lion {</p>

<pre><code>public function howl(){
    return 'がおー！';
}
</code></pre>

<p>}</p>

<p>class Cat {</p>

<pre><code>public function howl(){
    return 'にゃー';
}
</code></pre>

<p>}</p>

<p>$hoge = new Hoge();
$hoge->setAnimal(new Cat());
$hoge->howl();</p>

<p>```</p>

<p>setAnimalメソッドの引数をLion型に制限しています。定義方法は、クラス型 変数で定義します。
Javaと同じですね。</p>

<p>Lion型を渡してねと定義されているsetAnimalメソッドにCat型を渡してみました。</p>

<p><code>sh 実行結果
PHP Catchable fatal error:  Argument 1 passed to Hoge::setAnimal() must be an instance of Lion, instance of Cat given
</code></p>

<p>Cat型を渡すんじゃねーよ。Lion型寄越せと怒られます。
ではLion型を渡してみます。</p>

<p>```php
&lt;?php
class Hoge {</p>

<pre><code>private $animal;

/**
 * 渡せる型をLion型のみと制限する。
 * @param Lion $lion
 */
public function setAnimal(Lion $lion){
    $this-&gt;animal = $lion;
}

public function howl(){
    echo $this-&gt;animal-&gt;howl(), PHP_EOL;
}
</code></pre>

<p>}</p>

<p>class Lion {</p>

<pre><code>public function howl(){
    return 'がおー！';
}
</code></pre>

<p>}</p>

<p>class Cat {</p>

<pre><code>public function howl(){
    return 'にゃー';
}
</code></pre>

<p>}</p>

<p>$hoge = new Hoge();
$hoge->setAnimal(new Lion());
$hoge->howl();</p>

<p>```</p>

<p><code>sh 実行結果
がおー！
</code></p>

<p>Lion型が渡されたので、Fatal Errorが発生することなく正しく処理されました。</p>

<p>もちろんインターフェースもいけますよ。</p>

<p>```php
&lt;?php
class Hoge {</p>

<pre><code>private $animals;

/**
 * 渡せる型をAnimal型のみと制限する。
 * @param Animal $animal
 */
public function setAnimal(Animal $animal){
    $this-&gt;animals[] = $animal;
}

public function howl(){
    foreach ($this-&gt;animals as $animal) {
        echo $animal-&gt;howl() , PHP_EOL;
    }
}
</code></pre>

<p>}</p>

<p>class Lion implements Animal {</p>

<pre><code>public function howl(){
    return 'がおー！';
}
</code></pre>

<p>}</p>

<p>class Cat implements Animal {</p>

<pre><code>public function howl(){
    return 'にゃー';
}
</code></pre>

<p>}</p>

<p>interface Animal {</p>

<pre><code>public function howl();
</code></pre>

<p>}</p>

<p>$hoge = new Hoge();
$hoge->setAnimal(new Lion());
$hoge->setAnimal(new Cat());
$hoge->howl();</p>

<p>```</p>

<p><code>sh 実行結果
がおー！
にゃー
</code></p>

<p>注意点としては、</p>

<blockquote><p>タイプヒントは、object型やarray型 (PHP5.1以降) でのみ使用できます。 int および stringのような 通常の型でのタイプヒンティングはサポートされません。</p></blockquote>

<p>array型縛れるのはいいですね。個人的にはphpでも型は意識すべきだと思っているので利用できるところは利用したいと思います。</p>

<h2>参考</h2>

<p><a href="http://php.net/manual/ja/language.oop5.typehinting.php">タイプヒンティング</a></p>
]]></content>
  </entry>
  
</feed>
